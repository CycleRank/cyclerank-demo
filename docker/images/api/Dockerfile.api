# stage 1: build algo binaries
FROM ubuntu:jammy AS algo-builder
#-- igraph dependencies
RUN rm -rf /var/lib/apt/lists/* \
  && apt-get update \
  && apt-get upgrade -y \
  && apt-get install -y cmake build-essential pkg-config \
                        bison flex git wget \
                        libxml2-dev libz3-dev liblzma-dev libgfortran-11-dev \
                        libblas-dev liblapack-dev libarpack2-dev libgmp-dev 
#-- download igraph
WORKDIR /
RUN mkdir -pv /opt/igraph \
    &&  wget -P /opt/igraph/ \
        https://github.com/igraph/igraph/releases/download/0.10.4/igraph-0.10.4.tar.gz \
    && cd /opt/igraph \
    && tar -v -x -z -f igraph-0.10.4.tar.gz
#-- build and install igraph
#     https://igraph.org/c/html/latest/igraph-Installation.html
WORKDIR /opt/igraph/igraph-0.10.4
RUN mkdir -p build \
    && cd build \
    && cmake ..
WORKDIR /opt/igraph/igraph-0.10.4/build
# if you want to compile igraph staticall you should use these options
#   -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
RUN cmake .. \
    && cmake --build . \
    && cmake --build . --target check \
    && cmake --install .
WORKDIR /
COPY ./algorithms /algos
WORKDIR /algos
RUN make all

# stage 2: build cyclerank-api
FROM golang:1.20.2 AS api-builder
COPY ./api /api
WORKDIR /api/src
RUN go build .


# stage 3: download data
FROM ubuntu:jammy AS downloader
RUN apt-get update \
  && apt-get upgrade -y \
  && apt-get install -y wget zstd \
  && rm -rf /var/lib/apt/lists/*
RUN mkdir -pv /download/data && mkdir -pv /download/output
COPY ./docker/images/api/download-data.sh /
WORKDIR /download
ARG download_data
ENV download_data=${download_data:-false}
ARG download_output
ENV download_output=${download_output:-false}
RUN /download-data.sh

# stage 4: image
FROM phusion/baseimage:jammy-1.0.1
RUN apt-get update \
  && apt-get upgrade -y \
  # TODO: statically build the algorithms
  && apt-get install -y cmake build-essential pkg-config \
                        bison flex git wget \
                        libxml2-dev libz3-dev liblzma-dev libgfortran-11-dev \
                        libblas-dev liblapack-dev libarpack2-dev libgmp-dev \
  && rm -rf /var/lib/apt/lists/*
WORKDIR /
RUN mkdir -pv /opt/igraph \
    &&  wget -P /opt/igraph/ \
        https://github.com/igraph/igraph/releases/download/0.10.4/igraph-0.10.4.tar.gz \
    && cd /opt/igraph \
    && tar -v -x -z -f igraph-0.10.4.tar.gz
#-- build and install igraph
#     https://igraph.org/c/html/latest/igraph-Installation.html
WORKDIR /opt/igraph/igraph-0.10.4
RUN mkdir -p build \
    && cd build \
    && cmake ..
WORKDIR /opt/igraph/igraph-0.10.4/build
# if you want to compile igraph staticall you should use these options
#   -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
RUN cmake .. \
    && cmake --build . \
    && cmake --build . --target check \
    && cmake --install .
RUN mkdir -pv /usr/share/cyclerank-api/bin \
    && mkdir -pv /usr/share/cyclerank-api/swaggerui \
    && mkdir -pv /var/share/cyclerank-api/data \
    && mkdir -pv /usr/share/cyclerank-api/output
COPY --from=algo-builder /algos/bin \
                         /usr/share/cyclerank-api/bin
COPY --from=api-builder /api/src/cyclerank-api \
                        /bin/cyclerank-api
COPY --from=api-builder /api/src/swaggerui \
                        /usr/share/cyclerank-api/swaggerui
RUN ln -s /usr/share/cyclerank-api/swaggerui /usr/share/cyclerank-api/bin/swaggerui
COPY --from=downloader /download/data \
                       /usr/share/cyclerank-api/data
COPY --from=downloader /download/output \
                       /usr/share/cyclerank-api/output


EXPOSE 8080
WORKDIR /
CMD ["/bin/cyclerank-api", \
     "-bin", "/usr/share/cyclerank-api/bin", \
     "-repository", "/usr/share/cyclerank-api/data", \
     "-output_dir", "/usr/share/cyclerank-api/output" \
     ]
